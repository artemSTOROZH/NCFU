# Программирование на языке высокого уровня (Python).
# Задание № 4.3.2. Вариант 8
#
# Выполнил: Стороженко А.В.
# Группа: ПИН-б-о-21-1
# E-mail: artem-storozhenko_2016@mail.ru


from пицца import *
from заказ import Заказ

class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""
    ВЕРСИЯ = 1
    КОМПАНИЯ = "Pronto"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

                self.меню: список доступных пицц;
                self.заказ: список заказанных пицц;
                self.отображать_меню: определяет отображение меню
                                      равен True: при создании терминала,
                                      после отмены или подтверждения заказа.
                """
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """Вернуть строковое представление класса.

                Формат вывода:

                Имя пиццерии, версия программы.
                """

        return f"{self.КОМПАНИЯ} #{self.ВЕРСИЯ}\nДобро пожаловать!\n"

    def показать_меню(self):
        """Показать меню.

                Показать меню следует только при наличии флага self.отображать_меню
                self.отображать_меню устанавливается в False после вывода меню.

                Формат вывода:

                Пиццерия #1
                Добро пожаловать!

                Меню:
                1. Пицца: Пепперони | Цена: 350.00 р.
                   Тесто: тонкое Соус: томатный
                   Начинка: пепперони, сыр моцарелла
                2. Пицца: Барбекю | Цена: 450.00 р.
                   Тесто: тонкое Соус: барбекю
                   Начинка: бекон, ветчина, зелень, сыр моцарелла
                3. Пицца: Дары моря | Цена: 550.00 р.
                   Тесто: пышное Соус: тар-тар
                   Начинка: кальмары, креветки, мидии, сыр моцарелла
                Для выбора укажите цифру через <ENTER>.
                Для отмены заказа введите -1
                Для подтверждения заказа введите 0
                """
        if not self.отображать_меню:
            return
        else:
            for пицца in self.меню:
                print(пицца)
            print("Для выбора заказа укажите цифру через <Enter>")
            print("Для отмены заказа введите -1")
            print("Для подтверждения заказа введите 0\n")
            self.отображать_меню = False

    def обработать_команду(self, пункт_меню):
        """Обработать действие пользователя.

                Аргументы:
                  - пункт_меню (str): выбор пользователя.

                Возможные значения "пункт_меню":
                  - -1: отменить заказ;
                  -  0: подтвердить заказ; при этом осуществляется
                        выставление счета, оплата, а также выполняется заказ;
                        после заказ удаляется (= None)
                  - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                                       если заказ не создан, его нужно создать.
                  - иначе: сообщить о невозможности обработать команду.

                Каждое действие подтверждается выводом на экран, например:
                1
                Пицца Пепперони добавлена!
                2
                Пицца Барбекю добавлена!
                0
                Заказ подтвержен.
                """
        try:
            пункт_меню = int(пункт_меню)
            if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                self.отмена_заказа()
                return
            elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                self.принять_оплату()
                print("Заказ подтвержден.")
                print(f"Заказ №{Заказ.счетчик_заказов}")
                self.заказ.выполнить()
                print(f"Заказ №{Заказ.счетчик_заказов} готов! Приятного аппетита!")
                self.заказ = None
            elif 1 <= пункт_меню <= len(self.меню):
                if self.заказ == None:
                    self.заказ = Заказ()
                self.заказ.добавить(self.меню[пункт_меню - 1])
            else:
                raise ValueError
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
            if self.заказ != None:
                self.отмена_заказа()
        except Exception:
            print("Во время работы терминала произошла ошибка...")
            self.отмена_заказа()

    def рассчитать_сдачу(self, оплата):
        """Вернуть сдачу для 'оплата'.

                Если оплата меньше стоимости заказа, возбудить исключение ValueError.
                """
        if оплата >= self.заказ.сумма():
            сдача = оплата - self.заказ.сумма()
            print(f"Вы ввели сумму: {self.заказ.сумма()} р. Ваша сдача: {сдача} р.")
        else:
            raise ValueError

    def принять_оплату(self):
        """Обработать оплату.

                Эмулирует оплату заказа (клиент вводит сумму с клавиатуры).

                Если сумма оплаты недостаточна (определяет метод рассчитать_сдачу())
                или возникает другая ошибка - исключние передается выше.
                """
        try:
            print(f"Сумма оплаты: {self.заказ.сумма()}")
            сумма_оплаты = input("Введите сумму оплаты: ")
            сумма_оплаты = float(сумма_оплаты)
            self.рассчитать_сдачу(сумма_оплаты)
        except Exception:
            print("Оплата не удалась. Заказ будет отменен.")
            raise
    def отмена_заказа(self):
        Заказ.счетчик_заказов -= 1
        self.заказ = None
        print("Заказ отменен")
